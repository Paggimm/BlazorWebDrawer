@page "/testcanvas"
@using Blazor.Extensions
@using DefaultNamespace
@inherits LayoutComponentBase

<PageTitle>TestCanvas</PageTitle>

<h3>TestCanvas</h3>

<div class="canvas-container" style=@CanvasStyle @onmousedown="DrawClick" @onmouseup="DisableDrawing" @onmousemove="Draw">
    <BECanvas Width=@Width Height=@Weight @ref="_canvasReference"/>
</div>
<BrushSizeChooser BrushSizeChanged="UpdateBrushSize"/>

@code {
    private BECanvas? _canvasReference;
    private Drawer? _drawer;
    private int BrushSize { get; set; } = 10;
    
    [Parameter]
    public int Width { get; set; } = 500;

    [Parameter]
    public int Weight { get; set; } = 500;
    
    // since blazor does not yet support feeding variables to css a style-string is created to align div-container with canvas
    private string CanvasStyle  => "height: " + Weight + "px; width: " + Width+"px;";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var canvasContext = await _canvasReference.CreateCanvas2DAsync();
        if (_drawer == null)
        {
            _drawer = new(canvasContext);
        }
    }

    private void UpdateBrushSize(int size)
    {
        BrushSize = size;
    }

    /// Enables Drawing Mode and triggers initial Click-Drawing Call
    private void DrawClick(MouseEventArgs mouseEvent)
    {
        EnableDrawing();
        Draw(mouseEvent);
    }

    /// draws onto the canvas, if drawing is enabled
    private void Draw(MouseEventArgs mouseEvent)
    {
        _drawer!.SetBrushSize(BrushSize);
        _drawer!.Draw(mouseEvent);
    }

    private void EnableDrawing()
    {
        _drawer!.DrawingEnabled = true;
    }

    private void DisableDrawing()
    {
        _drawer!.DrawingEnabled = false;
    }

}